---
import Content from "../layouts/Content.astro";
import ProjectCard from "../components/ProjectCard.astro";

const extraButtonValue = { name: null, link: null };
---

<Content title="Projects" extraButton={extraButtonValue} }>
	<div class="grid sm:grid-cols-1 lg:grid-cols-2 2xl:grid-cols-3 gap-2">
		<ProjectCard
			title="Reddit Comment Archiver"
			link="https://github.com/genshin-subreddit-analytics"
		>
			<p>
				A periodic archiving system to capture and store
				Reddit comments on a scheduled basis.
			</p>
			<p>
				Made using <b>Docker</b> and utilized <b>AWS</b>
				services, including <b>AWS SES</b> to send email
				notifications, <b>AWS Fargate</b> to run containerized
				app, and <b>AWS Lambda</b> to execute Fargate Tasks.
			</p>
		</ProjectCard>
		<ProjectCard
			title="PeduliPantaiku"
			link="https://gitlab.informatika.org/TubesForLyfe/if2250-2022-k03-04-pedulipantaiku"
		>
			<p>
				A Desktop application made using <b>Python</b> to
				create a forum for sharing beach cleaning activities
				with CI/CD pipeline and <b>Docker</b>-ized
				database for testing.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Farm Simulation RPG"
			link="https://github.com/ZianTsabit/TubesLogkom"
		>
			<p>
				An RPG about Farming. Made in <b>GNU Prolog</b>.
			</p>
			<p>
				<i
					>"Claire is a girl who has just been
					scammed by a client who just disappeared
					without paying for the project she
					worked so hard to build. Apart from
					being a victim of fraud, Claire is also
					in debt of 20,000 gold which needs to be
					repaid within 1 year. Therefore, Claire
					decided to return to her hometown and
					continue her grandfather's farming
					business to be able to continue living
					and pay off her debts."</i
				>
			</p>
		</ProjectCard>
		<ProjectCard
			title="TCP Simulation"
			link="https://github.com/Sister19/jarkom-jaringansakitkepala"
		>
			<p>
				A TCP-like protocol implemented in <b>Python</b>
				on top of UDP with TCP principles such as congestion
				control, flow control, error detection, and correction
				mechanisms to ensure reliable delivery of data.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Dots and Boxes AI"
			link="https://github.com/malifpy/Dots-and-Boxes"
		>
			<p>
				AI agent for the classic game of Dots and Boxes,
				written in <b>Python</b>.
			</p>
			<p>
				Implemented <i>Simulated Annealing</i> and
				<i>Minimax</i> algorithms to enable the agent to
				make intelligent moves during gameplay.
			</p>
		</ProjectCard>
		<ProjectCard
			title="DNA Pattern Matcher"
			link="https://github.com/malifpy/Tubes3_13520135"
		>
			<p>
				A Web Application for DNA Pattern Matching made
				using <b>Go</b> backend and
				<b>PostgreSQL</b> database. It uses <i
					>Boyer-Moore</i
				> and <i>Knuth-Morris-Pratt</i> algorithm to compare
				DNA string with database.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Python Syntax Checker"
			link="https://github.com/lizardyy/TBuFalO"
		>
			<p>
				Python Syntax Checker made using Context-Free
				Grammar and CYK algorithm.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Network Traffic Visualizer"
			link="https://github.com/malifpy/network-stat-log"
		>
			<p>
				A network traffic visualizer using <b>Python</b>
				and <b>Bash</b> to capture network traffic data and
				<b>Matplotlib</b> to visualize it.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Wikipedia Speedrun Solver"
			link="https://github.com/malifpy/wikipedia-speedrun-solver"
		>
			<p>
				Solves <a
					href="https://wikispeedruns.com/"
					target="_blank"
					class="underline">Wikipedia Speedrun</a
				> using <i>Branch and Bound</i> algorithm.
			</p>
		</ProjectCard>
		<ProjectCard
			title="Minimum Vertex Cover Finder"
			link="https://github.com/malifpy/wikipedia-speedrun-solver"
		>
			<p>
				Calculate the Minimum <a
					href="https://en.wikipedia.org/wiki/Vertex_cover"
					target="_blank"
					class="underline">Vertex Cover</a
				> using <i>Divide and Conquer</i> algorithm.
			</p>
		</ProjectCard>
	</div>
</Content>
